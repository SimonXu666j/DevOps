极限编程（Extreme Programming） 持续集成（Continue Intergration）
持续集成解决的问题：
    1.1提高软件质量
	    从技术、自动化工具、过程模型、管理、测试角度去解决质量问题，质量的三个维度：符合目标、符合需求、符合实际需求。
	    高效的持续集成模式，即在分批提交代码的时候，就已经进行了测试，测试一直持续到程序开发完毕，一直延续到功能开发完，测试完，再开发，再测试，避免了在代码累积到一定量进行集成时，
		造成的代码质量低下的风险。不采用持续集成的情况下，bug的问题可能到交付前的集成测试时才被发现，导致延迟发布产品。
    1.2节约时间，缩短项目发布周期
        1.2.1深入了解顾客需求，减少开发过程中的需求变更与返工：根据国际最佳实践，改进型的项目在正式开发前应该有80%夫人需求被确定，突破性的新产品在开发前也至少有50%的需求被确定。市场人员
        与技术人员一起进行产品定义，减少信息传递过程的失真，减少开发过程工作的返工。采用跨职能团队合作方式进行项目立项分析工作，以节省、测试、制造和上市等的周期。
		1.2.2对新产品项目进行开发优先顺序排列和合理资源分配，确保重要的项目得到优先开发：根据国际最佳实践，一个工程师进行两个项目的开发时的开发效率最高。
		1.2.3采取跨职能团队组织模式进行新产品开发
		1.2.4建立技术平台和共用模块，缩短开发周期
	    1.2.5采用有效的项目管理方法进行开发项目的管理，有效的项目管理方法包括：目标定义、计划制定、团队组织、过程监控和结果交付等五个步骤。采用适当的IT工具提升开发效率，减少重复的
		过程可以节省时间、费用和工作量。
	1.3便捷部署：确保软件包是“完备的可部署单元”，部署包需要明确界定他们的先决条件和依赖，以便在匹配的环境上部署。顺畅和可靠的部署流程从简单的第一步开始：以一种自动的、可检查校验的方法
	   整合并发布一个结构化的、完整的部署包，该部署包定义了特定版本的应用程序中所有的组件、配置和依赖关系。
	1.4增强项目的可见性：软件开发项目缺少可见性，通过迭代开发、技术评审、持续集成增强项目的可见性。
		1.4.1迭代开发：将产品的交付过程分为多个阶段，按照功能递增式交付。
        1.4.2技术评审：代码走审、会议评审和同行专家评审。
        1.4.3持续集成：持续集成能够把最终的一次大规模的集成调试过程分散到项目开发时间表的每一周、每一天、甚至每个小时。让项目中的各个人员都能够随时掌握当前的整体进度，并迅速发现集成
             过程中出现的问题并进行解决。持续集成的效果：（1）有效决策：持续集成系统为项目构建状态和品质指标提供了及时的信息，有些持续集成系统可以报告功能完成度和缺陷率。（2）注意项目
             进展的趋势：由于经常集成，我们可以看到一些趋势，如构建成功或失败、总体品质及其他的项目信息。
    1.5建立团队对开发产品的信心
    1.6解决项目管理的困惑：持续集成在开发者和开发者之间、开发者和测试之间、开发者和配置管理之间形成了一条“无缝焊接”之路。
    1.7总结：持续集成能节约你的时间和成本，能让你的迭代的节奏更紧凑，让开发和测试之间的协作更完美协调。	