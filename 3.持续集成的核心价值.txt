1.价值点：
     1.1持续集成的价值
	 1.2增强项目的可见性
	 1.3对于在项目中实现持续集成的团队和个人很有好处的7项实践：......
	   少于20人的团队中实现持续集成，推荐使用Single Branch 开发策略，减少多分支在合并时的开销。每个分支都需要有专属的持续集成环境（包括持续集成服务器、构建环境和测试环境等）。
	   当团队完成持续集成服务器的最初搭建，编写好一键式编译和测试脚本工作后，就需要考虑如何利用持续集成环境进行团队协作开发。
2.减少风险： 
    关键风险：没有可部署的软件、很晚才发现缺陷、缺少项目可见性、低品质的软件
3.根据变更构建软件：执行单命令构建。
    3.1集中放置软件资产，一种方法是使用版本控制库存放所有文件，除了代码，还包括：组件，包括源文件和库文件、第三方组件，如JAR文件、库、DLL等、配置文件
    初始化应用承德数据文件、构建脚本号构建环境设置、某些组件的安装脚本。
	3.2让构建快速失败，创建快速构建的主要步骤为：集成组件、运行真正的单元测试，以及执行其他自动化的过程。
	3.3.1构建类型：私有构建、集成构建、发布构建
	3.3.2构建触发机制：用户驱动、定期执行、轮训变更、事件驱动
	3.3.3构建常用功能：以特定的时间间隔轮训版本控制库中的变更、定期执行某种操作、标识出“安静期”，在这段时间内不进行集成构建、支持不同的构建脚本工具，包括命令行工具、向相应人员发送
	     电子邮件、显示以前构建的历史、显示一个Web信息面板，这样每个人都可以查看集成构建的信息、为不同的项目支持多个版本控制方法
	3.3.4构建效率统计：收集构建测试数量、分析构建测试数量、选择并实现改进、重新评估，有必要则再次重复这个过程。
	3.3.5构建测量指标：编译时间、源代码行数（SLOC）、审查的种类数、平均组装生成时间、测试执行时间（根据分类）、成功构建和失败构建的比例、审查时间、部署时间、重建数据库的时间、集成构建
	     计算机系统资源和使用情况、版本控制系统的负载。
	3.3.6构建改进方法：使用专门的集成构建计算机、增强集成构建计算机的硬件能力、改进性能测试、安排集成构建的顺序、优化基础设施、优化构建过程、单独构建系统组件、改进软件审查的性能、
	     执行分布式集成构建。
4.总结：初级阶段：快速构建为核心，深入阶段：集成多种工具、提高构建结果和代码质量为核心，高级阶段：利用持续再持续的方式将多角色的多工作结合到一起，形成快速迭代，实施、结果反馈、优化、再
        迭代、实施、结果反馈、优化的过程。		 

	     