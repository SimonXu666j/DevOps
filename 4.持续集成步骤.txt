1.如何选择最佳解决方案
     1.1目标：开发者将代码提交到svn之前，必须运行本地测试。
	          开发者每天进行多次提交
			  持续集成在一台服务器上不断运行
			  所有测试必须全部通过
			  生产构建结果
			  生产报表
			  修复失败的构建
	2.1成本：硬件花费：一台开发机器加一个指示灯（在构建失败时变红）
	         管理开销：持续集成服务器，免费的CruiseControl,分别有CruiseControl.rb(Ruby),CruiseControl.net(.NET),CruiseControl(java).
	3.耗时：提高开发者提交的速度
	        学习自动化测试
	4.成效
	5.拥抱持续集成：持续集成最广泛的益处是降低风险。持续集成是一种态度，是一种手段。
2.持续集成实践计划：实现软件编译构建自动化，把所有需要的东西都放进版本控制系统里，用一条命令构建整个系统。
                    引入一些自动化测试到构建中。
					试着加快提高软件编译构建的速度。
	2.1.阶段式构建：为不同的构建测试套件建立不同的持续集成循环周期。优点：暂时解决反馈时间长的问题，缺点：仍存在浪费，提交频繁时问题定位较困难
	              不同的构建计划:
				             单元测试：Checkstyle 编译 单元测试 报告
							 功能测试：Checkstyle 编译 打包 部署 功能测试 报告
							 性能测试：编译 打包 部署 性能测试 报告
	2.2.过程式构建：
	             第一单元：Checkstyle 编译 单元测试 ，第二单元：打包生产软件，第三单元：部署并进功能测试，第四单元：性能测试
			     优点：消除重复工作，提供持续的信息反馈，反应整个构建过程。缺陷：团队自己管理的内容多一些，复杂一些。
	2.3.管道式持续集成：所有的过程单元都运行在同一个管道的上下文，代码基线相同。
	             中央代码库-->编译打包-->单元测试-->功能测试-->性能测试-->部署UAT测试-->可交付物
	2.4并发执行持续集成：将同一类型的测试分成几组，同时运行在配置相同的工作站上。这样，虽然不能减少总时间，但是完成所有同类型测试所需要的时间周期会缩短。
	              构建级别表、测试级别表、配置管理级别表
3.持续集成实践风险：采用什么样的集成方式考虑的方面：
                     增加持续集成服务器的投入
					 增加构建人手，大的团队甚至可以由一个构建负责人带领一个“分布式”的团队
					 选定合理的集成周期，是实时构建还是每日构建。
					 CM(配置管理员) BM（编译管理员）
	