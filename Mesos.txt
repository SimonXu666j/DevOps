用Mesos框架构建分布式应用框架
1.现在称为应用或程序的东西以前称为作业（jobs）。在shell中，将某个进程放到后台，就可以使用命令jobs来查看shell启动的所有程序。 
2.Mesos：意在成为能够在很多独立应用程序，共享计算集群的平台。
3.Mesos是一种系统，帮助用户治理计算集群或者数据中心所有不同的机器，将每台机器当作单独的逻辑实体。
  Mesos是跨集群管理CPU、内存以及其他资源的编排平台，并且提供了实时API，可以用来和集群交互并且辅助开发。
4.一方面Mesos是基础架构，另一方面，Mesos也是用户用来构建程序的平台。
5.Mesos扮演两种角色：部署系统和执行平台。
6.Ansible和Chef等部署系统缺陷：刻意的让一组机器遵循某个固定的配置。无法动态分配资源，无法动态更改配置。
  Mesos可以针对工作负载以及其他集群条件的变化，动态做出决策。
7.很多框架本身也是平台，当很多应用程序遵守相同的通用部署模式（比如Web服务器）时，那么单个框架就可以管理这些应用程序（比如Marathon，一种针对无状态服务的Mesos框架）。
8.把Mesos当作托管应用程序的平台，用户可以在现在，或者当新需求技术出现时，起送启动所需的任何框架，来提供所需的任何功能。 
9.总结：
Mesos本质上是操作系统：它管理计算机，将其统一治理成单一的逻辑单元。企业使用Mesos是因为它的可靠性、灵活性和高效性。
框架是运行在Mesos上的分布式应用程序，对它们而言，Mesos提供了基础架构和执行服务。框架可以是应用程序，比如Hadoop或Storm,也可以是部署系统，比如Ansible或Chef。Mesos和框架携手并进，将Mesos集群里的机器片分配给不同的角色。将某个框架所独占的机器群壁垒打破。


框架
1.运行在Mesos上的应用程序称为框架。一个框架由两部分组成：控制器部分，称为调度器。工作单元部分，称为执行器。
  当一个调度器首次启动时，会连接到Mesos集群，这样它才能使用集群的资源。调度器运行之后，会给Mesos发送请求，启动它认为合适的执行器，执行器完成任务，任务完成后，执行器向调度器发送状态更新。
2.Mesos集群由两个组件组成：Mesos master和Mesos slave。master是协调集群的软件，slave则在容器里执行代码。
  Master的职责：
     运行任务的中央资源
     在所有连接上的框架间公平共享集群
     为集群维护主要的UI
     确保资源的高可用性和高效分配
  Slave的职责：
     启动并且管理托管执行器的容器（LXC容器和Docker镜像）
     提供UI来访问容器内数据
     和本地执行器通信，从而管理和Mesos master的通信
     展示所运行的主机的信息，包括运行任务和执行者的信息、可用资源，以及其他元数据
     管理任务的状态更新
     创建状态的检查点，从而启用集群的滚动重启


资源
1.Mesos slave 使用Cpu共享，内存则是严格预分配的资源。
2.Mesos可以配置自定义资源配置，属性不由Mesos分配器使用。它们仅仅传递给框架调度器来辅助其调度决策。
3.为了决定哪些资源能够提供给哪些框架，Mesos使用了“角色”的概念。如果用户想要使用角色，那么必须在Master上设置由逗号分隔的有效角色列表。
