1.资源提供方式要遵循一定的标准，没有标准，运维工作无法实现全面自动化。
  标准包括：网段的划分、防火墙策略规则、服务起版本、域名配置规则等
  底层资源标准化、运维管理自动化、用户服务自助化的层层推进构建最终的私有PaaS平台。
2.常规运维工作：软件配置、服务部署、服务发现、监控恢复
3.平台功能划分：
     计算单元打包（Docker）：涵盖了操作系统、中间件、依赖包、业务逻辑程序等运行业务系统的全栈组件
	 资源动态分配（Mesos）：统一资源管理，按需动态分配	 作业调度功能（Marathon）：与资源管理的最大不同在于器要对运行中的应用服务负责，包括启动、停止、监控服务，以及在服务失效时将故障转移。
	               资源管理器的功能相对稳定，作业调度器任务类型多样易变，如将两者绑在以前，会失去分布式平台的计算灵活性。
	 分布式存储：分布式平台底层对上提供面向块、文件及对象的存储结构，同时做到可扩展性及可伸缩性。
	 分布式协调系统（zk）：在分布式系统中同样存在并发任务对全局变量访问的一种场景，同样需要进行同步控制。
	 数据共享中心：在分布式平台中需要有一个数据共享中心来放置应用之间交互的数据，满足应用之间数据的快速交互及互相访问，同时不会让应用耦合在一起。共享中心
                   依据数据类型的不同而不同，可以是一个DNS服务器，也可以是分布式消息队列。
	 日志集中管理：在一般情况下日志以文件的形式存放在本地操作系统上以供查询，而在分布式系统中，计算单元不会再固定于一个物理节点。在分布式平台上构建集中的     		   日志管理平台，将各种类型的日志收集、索引好，以消息的形式看待每条日志将成为分布式平台的一个重要功能。
	 监控巡检管理：监控的复杂度在于它比配置管理的数量级更大，要对每一个配置项所包含的监控项进行监控。
	 软件自动配置：分布式平台依然需要批量命令下发的工具，对于运行状态计算节点的批量控制需求在分布式场景中依然存在。
	 平台门户与API：以上资源整合，统一接口对外提供服务，分为面向用户的Web门户和基于JSON格式的API服务器。门户实现用户管理、权限管理以及配置管理功能，基于API的服务器关注于将以上资源聚合成一个完整服务，对外提供可编程的接口。
4.平台高阶架构：
	 Portal
	 API Server
	 ComputeUnit	 ResourceManage：资源管理器将数据中心的所有资源抽象成一个“大操作系统”，并不向用户应用程序直接提供接口，而是将资源分配给不同的调度框架，这些调度框架可以用于长任务型服务、批处理、后台任务，以及流程计算等各种类型的资源需求应用。 SchedulFramework：调度器与资源管理是紧密相连的，Marathon结合Dcoker实现分布式平台上Service类型的计算逻辑动态伸缩与飘逸。定时任务的Chronos能够将企业内部的ETL任务统一到平台中，共享计算资源。
	 Coordinator：在分布式平台的中心有一个类似于交通枢纽的协调管理系统，用于分布式协调锁，同步各类组件状态。
	 AutoOps：AutoOps自动化运维工具，满足动态资源的批量命令与静态软件配置需求，使用Saltstack作为使用Docker计算单元打包的一个补丁。
	 Log：日志作为消息发到远端的集中管理处。ELK将所有节点的日志导入一个集中部分进行查看与展示。
	 其他：存储方面，大型企业采用专用存储设备保存核心数据，对于核心的交易请求保证I/O响应时间与吞吐。
	       对于长任务型的Web服务，需要增加负载均衡。硬件设备F5+软件Haproxy。Haproxy+Keepalived，前者负责负载均衡，后者负责切换虚拟服务IP地址，实现高可用