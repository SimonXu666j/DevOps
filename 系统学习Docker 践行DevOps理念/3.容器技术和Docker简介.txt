Docker Platform：
Docker提供了一个开发、打包、运行app的平台
把app和底层infrastructure隔离开来 

Docker C/S架构：
Application
     |
Docker Engine：后台进程（dockerd） REST API Server  CLI接口（docker）
     |
Infrastructure

底层技术支持
Namespaces:做隔离pid net ipc mnt uts
Control groups：做资源限制
Union file systems:Container和image的分层

Docker Image
文件和meta data的集合（root filesystem）
分层的，并且每一层都可以添加改变删除文件，成为一个新的image
不同的image可以共享相同的layer
Image本身的read-only

Image的获取
Dockerfile
pull from registry

制作基础镜像
vim Dockerfile
docker build -t tag .

查看docker image 分层情况
docker history imageID

Container
通过Image创建（copy）
在Image layer之上建立一个container layer（可读写）
类比面向对象：类和实例
Image负责app的存储和分发，Container负责运行app   

docker rm container_id   删除容器
docker rmi image_id      删除镜像

创建镜像
docker commit      --create a new image from a container's changes
docker build       --build an image from a Dockerfile

Dockerfile语法及最佳实践    --官方文档地址：https://docs.docker.com/engine/reference/builder/
1.FROM
FROM scratch    #制作base image
FROM centos     #使用base image
注：尽量使用官方的image作为base image
2.LABEL
LABEL maintainer="xuming3@asiainfo.com"
LABEL version="1.0"
LABEL description="This is description"
注：Metadate不可少
3.RUN
RUN yum update && yum install -y vim \
    python-dev      #反斜线换行
注：为了美观，复杂的RUN请用反斜线换行，避免无用分层，合并多条命令成一行。
4.WORKDIR
WORKDIR /root
WORKDIR /test #如果没有会自动创建test目录
WORKDIR demo 
RUN pwd    #输出结果应该是/test/demo
注：用WORKDIR，不要用RUN cd，尽量使用绝对目录
5.ADD and COPY
ADD hello /
ADD test.tar.gz /     #添加到根目录并解压
WORKDIR /root
ADD hello test/    #/root/test/hello
WORKDIR /root
COPY hello test/
注：大部分情况，COPY优于ADD,ADD除了COPY还有额外功能（解压），添加远程文件、目录请使用curl或者wget
6.ENV
ENV MYSLQ_VERSION 5.6   #设置常量
RUN apt-get install -y mysql-server="${MYSLQ_VERSION}" \
    && rm -rf /var/lib/apt/lists/*   #引用常量
注：尽量使用ENV增加可维护性

RUN CMD ENTRYPOINT的比较：
RUN：执行命令并创建新的Image Layer
CMD：设置容器启动后默认执行的命令和参数
ENTRYPOINT：设置容器启动时运行的命令

Shell和Exec格式：
Shell格式
RUN apt-get install -y vim
CMD echo "hello docker"
ENTRYPOINT echo "hello docker"
Exec格式
RUN ["apt-get", "install", "-y", "vim"]
CMD ["/bin/echo", "hello docker"]
ENTRYPOINT ["/bin/echo", "hello docker"]

CMD:
容器启动时默认执行的命令
如果docker run指定了其它命令，CMD命令被忽略
如果定义多个CMD，只有最后一个会执行
ENTRYPOINT：
让容器以应用程序或者服务的形式运行
不会被忽略，一定执行
最佳实践：写一个shell脚本作为entrypoint
COPY docker-entrypoint.sh /usr/local/bin
ENTRYPOINT ["docker-entrypoint.sh"]
EXPOSE 27017
CMD ["mongod"]


镜像的发布
先登录docker hub 
docker login
然后推送到仓库
docker push 

搭建私有docker仓库
docker run -d -p 5000:5000 --restart always --name registry registry:2
另外的机器创建镜像
docker build -t ip:port/hello-world .
推送镜像至私有仓库（在这步之前，在/etc/docker目录下创建daemon.json，加入page{ "insecure-registries":["ip:port"] }，然后编辑/lib/systemd/system/docker.service，加一行EnvironmentFile=-/etc/docker/daemon.json，然后重启docker服务）
docker push ip:port/hello-world   
通过docker registry的API查看镜像是否推送至私有仓库，有哪些镜像
ip:port/v2/_catalog


docker run -d --name=demo           --name可以指定容器唯一的NAME值
docker inspect container_id        --查看容器的详细信息
docker logs container_id           --查看容器运行产生的输出