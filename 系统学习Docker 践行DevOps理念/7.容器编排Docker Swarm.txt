容器编排：Swarm mode

创建一个三节点的swarm集群：一个manager 两个worker
1.在manager节点初始化manager：docker swarm init --advertise-add=ip
2.在worker节点机器创建worker：dockerswarm join --token xxx ip:port
3.在manager查看cluster节点信息：docker node ls

Service的创建维护和水平扩展
docker service create --name demo busybox command    --创建service
注：在swarm模式下基本不使用docker run
docker service ls    --查看创建的service
docker service ps demo    --查看service详细情况
docker service scale demo=5       --创建5个demo实例
docker service rm demo        --删除service


在swarm集群里通过service部署WordPress
1.docker network create -d overlay demo    --创建一个overlay的网络
2.docker network ls      --查看网络
3.docker service create --name mysql_db --env MYSQL_ROOT_PASSWORD=root 
--env MYSQL_DATABASE=wordpress --network demo --mount type=volume,source=mysql-data,destination=/var/lib/mysql mysql                     --创建mysql的service
4.docker service --name wordpress -p 80:80 -env WORDPRESS_DB_PASSWORD=root --env WORDPRESS_DB_HOST=mysql wordpress                       --创建wordpress的service
注：swarm的底层机制会同步网络的创建，为了实现容器之间的通信

集群服务间通信之RoutingMesh
VIP    --虚拟ip
nslookup service_name  --查看dns对应的vip
nslookup tasks.service_name   --查看真实ip

Routing Mesh的两种体现
Internal  -- Container和Container之间的访问通过overlay网络（通过VIP虚拟IP）
Ingress   --如果服务有绑定端口，则此服务可以通过任意swarm节点的相应接口访问

DockerStack部署wordpress
docker stack deploy wordpress --compose-file=dockcer-compose.yml     --创建wordpress的服务
docker stack services wordpress      --查看service状态
docker stack ps wordpress     --查看容器情况
docker stack rm wordpress     --删除service


DockerSecret管理和使用
1.存在Swarm Manager节点 Raft database里
2.Secret可以assign给一个service，这个service就能看到这个secret
3.在container内部Secret看起来像文件，但是实际是在内存中

secret的创建可以通过从文件中读取，也可以从标准输入读取。
1.docker secret create my-passwd passwd_file   --从文件中读取创建secret
  rm passwd_file      --删除文件
  docker secret ls    --查看secret文件
2.echo "admin123"|docker secret create my-passwd2 -     --从标准输入读取

service如何使用secret？
1.创建service的时候将secret暴露给service    --secret my-passwd
2.在容器的/run/secrets目录下能找到secret

DcockerSecret在Stack中的使用
在docker-compose.yml文件中配置

Service更新
docker service update --image 新版本的镜像       --更新service的镜像
--publish-rm 8080:5000 --publish-add 8088:5000   --更新service的端口
注：scale起两个的话，更新的时候会一个一个的更新，做到业务不中断

如果是docker stack需要跟新service的话，需要去更新docker-compose.yml文件，然后重新docker stack deploy 
